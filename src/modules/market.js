"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Market = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_1 = require("./base");
const util_1 = require("../util");
/**
 * @stability stable
 */
class Market extends base_1.Base {
    /**
     * Exchange Information.
     *
     * @param options ``` [options.symbol] - symbol(optional) ex: BTCUSDT. [options.symbols] - for mutiple symbols, add comma for each symbol in string. ex: BTCUSDT,BNBBTC . ```.
     * @returns
     * @stability stable
     */
    exchangeInfo(options = {}) {
        if (Object.keys(options).includes("symbol")) {
            options["symbol"] = options["symbol"].toUpperCase();
        }
        if (Object.keys(options).includes("symbols")) {
            options["symbols"] = options["symbols"].split(',').map((symbol) => symbol.toUpperCase()).join(',');
        }
        const res = this.publicRequest("GET", "/exchangeInfo", options);
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Order Book.
     *
     * @param options ``` [options.limit] - Default 100; max 5000. Valid limits:[5, 10, 20, 50, 100, 500, 1000, 5000]. ```.
     * @returns
     * @stability stable
     */
    depth(symbol, options = { limit: 100 }) {
        const res = this.publicRequest("GET", "/depth", Object.assign(options, {
            symbol: symbol.toUpperCase(),
        }));
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Recent Trades List.
     *
     * @param options ``` [options.limit] -limit(optional) Default 500; max 1000. ex: 500. ```.
     * @returns
     * @stability stable
     */
    trades(symbol, options = { limit: 500 }) {
        const res = this.publicRequest("GET", "/trades", Object.assign(options, {
            symbol: symbol.toUpperCase(),
        }));
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Old Trade Lookup.
     *
     * @param options ``` [options.limit] -limit(optional) Default 500; max 1000. ex:500. ```.
     * @returns
     * @stability stable
     */
    historicalTrades(symbol, options = { limit: 500 }) {
        const res = this.publicRequest("GET", "/historicalTrades", Object.assign(options, {
            symbol: symbol.toUpperCase(),
        }));
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Compressed/Aggregate Trades List.
     *
     * Note: If sending startTime and endTime, the interval must be less than one hour
     *
     * @param options ``` [options.fromId] - id to get aggregate trades from INCLUSIVE. [options.startTime] - Timestamp in ms to get aggregate trades from INCLUSIVE. [options.endTime] - Timestamp in ms to get aggregate trades until INCLUSIVE. [options.limit] - Default 500; max 1000. ex:500 ```.
     * @returns
     * @stability stable
     */
    aggTrades(symbol, options = { limit: 500 }) {
        const res = this.publicRequest("GET", "/aggTrades", Object.assign(options, {
            symbol: symbol.toUpperCase(),
        }));
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Kline/Candlestick Data.
     *
     * @param options ``` [options.startTime] [options.endTime] [options.limit] -Default 500; max 1000. ex: 500 ```.
     * @returns
     * @stability stable
     */
    klines(symbol, interval, options = { limit: 500 }) {
        const res = this.publicRequest("GET", "/klines", Object.assign(options, {
            symbol: symbol.toUpperCase(),
            interval: interval,
        }));
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Current Average Price.
     *
     * @stability stable
     */
    avgPrice(symbol) {
        const res = this.publicRequest("GET", "/avgPrice", { symbol: symbol.toUpperCase() });
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * 24hr Ticker Price Change Statistics.
     *
     * @stability stable
     */
    ticker24hr(symbol) {
        if (symbol) {
            symbol = symbol.toUpperCase();
        }
        const res = this.publicRequest("GET", "/ticker/24hr", { symbol });
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Symbol Price Ticker.
     *
     * @stability stable
     */
    tickerPrice(symbol) {
        if (symbol) {
            symbol = symbol.toUpperCase();
        }
        const res = this.publicRequest("GET", "/ticker/price", { symbol });
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
    /**
     * Symbol Order Book Ticker.
     *
     * @stability stable
     */
    bookTicker(symbol) {
        if (symbol) {
            symbol = symbol.toUpperCase();
        }
        const res = this.publicRequest("GET", "/ticker/bookTicker", { symbol });
        const rawData = JSON.parse(res.getBody());
        const formatDatas = util_1.fromatData(rawData);
        return formatDatas;
    }
}
exports.Market = Market;
_a = JSII_RTTI_SYMBOL_1;
Market[_a] = { fqn: "mexc-sdk.Market", version: "1.0.0" };
//# sourceMappingURL=data:application/json;base64,